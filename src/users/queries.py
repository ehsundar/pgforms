# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.20.0
# source: queries.sql
from typing import AsyncIterator, Iterator, Optional
import uuid

import sqlalchemy
import sqlalchemy.ext.asyncio

from src.users import models


CREATE_SESSION = """-- name: create_session \\:one
insert into sessions (username)
values (:p1)
returning id, username, issued_at
"""


CREATE_USER = """-- name: create_user \\:one
insert into users(username, password, email, name)
values (:p1, :p2, :p3, :p4)
returning username, password, email, name
"""


GET_SESSION = """-- name: get_session \\:one
select id, username, issued_at
from sessions
where id = :p1
"""


GET_USER = """-- name: get_user \\:one
select username, password, email, name
from users
where username = :p1
"""


GET_USER_SESSIONS = """-- name: get_user_sessions \\:many
select id, username, issued_at
from sessions
where username = :p1
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_session(self, *, username: str) -> Optional[models.Session]:
        row = self._conn.execute(sqlalchemy.text(CREATE_SESSION), {"p1": username}).first()
        if row is None:
            return None
        return models.Session(
            id=row[0],
            username=row[1],
            issued_at=row[2],
        )

    def create_user(self, *, username: str, password: str, email: str, name: str) -> Optional[models.User]:
        row = self._conn.execute(sqlalchemy.text(CREATE_USER), {
            "p1": username,
            "p2": password,
            "p3": email,
            "p4": name,
        }).first()
        if row is None:
            return None
        return models.User(
            username=row[0],
            password=row[1],
            email=row[2],
            name=row[3],
        )

    def get_session(self, *, id: uuid.UUID) -> Optional[models.Session]:
        row = self._conn.execute(sqlalchemy.text(GET_SESSION), {"p1": id}).first()
        if row is None:
            return None
        return models.Session(
            id=row[0],
            username=row[1],
            issued_at=row[2],
        )

    def get_user(self, *, username: str) -> Optional[models.User]:
        row = self._conn.execute(sqlalchemy.text(GET_USER), {"p1": username}).first()
        if row is None:
            return None
        return models.User(
            username=row[0],
            password=row[1],
            email=row[2],
            name=row[3],
        )

    def get_user_sessions(self, *, username: str) -> Iterator[models.Session]:
        result = self._conn.execute(sqlalchemy.text(GET_USER_SESSIONS), {"p1": username})
        for row in result:
            yield models.Session(
                id=row[0],
                username=row[1],
                issued_at=row[2],
            )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_session(self, *, username: str) -> Optional[models.Session]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_SESSION), {"p1": username})).first()
        if row is None:
            return None
        return models.Session(
            id=row[0],
            username=row[1],
            issued_at=row[2],
        )

    async def create_user(self, *, username: str, password: str, email: str, name: str) -> Optional[models.User]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_USER), {
            "p1": username,
            "p2": password,
            "p3": email,
            "p4": name,
        })).first()
        if row is None:
            return None
        return models.User(
            username=row[0],
            password=row[1],
            email=row[2],
            name=row[3],
        )

    async def get_session(self, *, id: uuid.UUID) -> Optional[models.Session]:
        row = (await self._conn.execute(sqlalchemy.text(GET_SESSION), {"p1": id})).first()
        if row is None:
            return None
        return models.Session(
            id=row[0],
            username=row[1],
            issued_at=row[2],
        )

    async def get_user(self, *, username: str) -> Optional[models.User]:
        row = (await self._conn.execute(sqlalchemy.text(GET_USER), {"p1": username})).first()
        if row is None:
            return None
        return models.User(
            username=row[0],
            password=row[1],
            email=row[2],
            name=row[3],
        )

    async def get_user_sessions(self, *, username: str) -> AsyncIterator[models.Session]:
        result = await self._conn.stream(sqlalchemy.text(GET_USER_SESSIONS), {"p1": username})
        async for row in result:
            yield models.Session(
                id=row[0],
                username=row[1],
                issued_at=row[2],
            )
