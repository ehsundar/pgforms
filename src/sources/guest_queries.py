# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.20.0
# source: guest_queries.sql
import dataclasses
from typing import Any, AsyncIterator, Iterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from src.sources import models


LIST_TABLE_COLUMNS = """-- name: list_table_columns \\:many
select column_name, data_type, column_default, is_nullable
from information_schema.columns
where table_schema = :p1
  and table_name = :p2
"""


@dataclasses.dataclass()
class ListTableColumnsRow:
    column_name: Optional[Any]
    data_type: Optional[Any]
    column_default: Optional[Any]
    is_nullable: Optional[Any]


LIST_TABLES = """-- name: list_tables \\:many
select table_schema, table_name
from information_schema.tables
where table_schema not in ('information_schema', 'pg_catalog')
"""


@dataclasses.dataclass()
class ListTablesRow:
    table_schema: Optional[Any]
    table_name: Optional[Any]


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def list_table_columns(self, *, table_schema: Optional[Any], table_name: Optional[Any]) -> Iterator[ListTableColumnsRow]:
        result = self._conn.execute(sqlalchemy.text(LIST_TABLE_COLUMNS), {"p1": table_schema, "p2": table_name})
        for row in result:
            yield ListTableColumnsRow(
                column_name=row[0],
                data_type=row[1],
                column_default=row[2],
                is_nullable=row[3],
            )

    def list_tables(self) -> Iterator[ListTablesRow]:
        result = self._conn.execute(sqlalchemy.text(LIST_TABLES))
        for row in result:
            yield ListTablesRow(
                table_schema=row[0],
                table_name=row[1],
            )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def list_table_columns(self, *, table_schema: Optional[Any], table_name: Optional[Any]) -> AsyncIterator[ListTableColumnsRow]:
        result = await self._conn.stream(sqlalchemy.text(LIST_TABLE_COLUMNS), {"p1": table_schema, "p2": table_name})
        async for row in result:
            yield ListTableColumnsRow(
                column_name=row[0],
                data_type=row[1],
                column_default=row[2],
                is_nullable=row[3],
            )

    async def list_tables(self) -> AsyncIterator[ListTablesRow]:
        result = await self._conn.stream(sqlalchemy.text(LIST_TABLES))
        async for row in result:
            yield ListTablesRow(
                table_schema=row[0],
                table_name=row[1],
            )
