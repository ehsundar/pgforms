# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.20.0
# source: queries.sql
from typing import AsyncIterator, Iterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from src.sources import models


CREATE_SOURCE = """-- name: create_source \\:one
insert into sources(owner, conn_string)
values (:p1, :p2)
returning id, owner, conn_string, created_at
"""


DELETE_SOURCE = """-- name: delete_source \\:one
delete
from sources
where id = :p1
returning id
"""


GET_SOURCE = """-- name: get_source \\:one
select id, owner, conn_string, created_at
from sources
where id = :p1
"""


LIST_SOURCES = """-- name: list_sources \\:many
select id, owner, conn_string, created_at
from sources
where owner = :p1
"""


UPDATE_SOURCE = """-- name: update_source \\:one
update sources
set conn_string=:p2
where id = :p1
returning id, owner, conn_string, created_at
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_source(self, *, owner: str, conn_string: str) -> Optional[models.Source]:
        row = self._conn.execute(sqlalchemy.text(CREATE_SOURCE), {"p1": owner, "p2": conn_string}).first()
        if row is None:
            return None
        return models.Source(
            id=row[0],
            owner=row[1],
            conn_string=row[2],
            created_at=row[3],
        )

    def delete_source(self, *, id: int) -> Optional[int]:
        row = self._conn.execute(sqlalchemy.text(DELETE_SOURCE), {"p1": id}).first()
        if row is None:
            return None
        return row[0]

    def get_source(self, *, id: int) -> Optional[models.Source]:
        row = self._conn.execute(sqlalchemy.text(GET_SOURCE), {"p1": id}).first()
        if row is None:
            return None
        return models.Source(
            id=row[0],
            owner=row[1],
            conn_string=row[2],
            created_at=row[3],
        )

    def list_sources(self, *, owner: str) -> Iterator[models.Source]:
        result = self._conn.execute(sqlalchemy.text(LIST_SOURCES), {"p1": owner})
        for row in result:
            yield models.Source(
                id=row[0],
                owner=row[1],
                conn_string=row[2],
                created_at=row[3],
            )

    def update_source(self, *, id: int, conn_string: str) -> Optional[models.Source]:
        row = self._conn.execute(sqlalchemy.text(UPDATE_SOURCE), {"p1": id, "p2": conn_string}).first()
        if row is None:
            return None
        return models.Source(
            id=row[0],
            owner=row[1],
            conn_string=row[2],
            created_at=row[3],
        )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_source(self, *, owner: str, conn_string: str) -> Optional[models.Source]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_SOURCE), {"p1": owner, "p2": conn_string})).first()
        if row is None:
            return None
        return models.Source(
            id=row[0],
            owner=row[1],
            conn_string=row[2],
            created_at=row[3],
        )

    async def delete_source(self, *, id: int) -> Optional[int]:
        row = (await self._conn.execute(sqlalchemy.text(DELETE_SOURCE), {"p1": id})).first()
        if row is None:
            return None
        return row[0]

    async def get_source(self, *, id: int) -> Optional[models.Source]:
        row = (await self._conn.execute(sqlalchemy.text(GET_SOURCE), {"p1": id})).first()
        if row is None:
            return None
        return models.Source(
            id=row[0],
            owner=row[1],
            conn_string=row[2],
            created_at=row[3],
        )

    async def list_sources(self, *, owner: str) -> AsyncIterator[models.Source]:
        result = await self._conn.stream(sqlalchemy.text(LIST_SOURCES), {"p1": owner})
        async for row in result:
            yield models.Source(
                id=row[0],
                owner=row[1],
                conn_string=row[2],
                created_at=row[3],
            )

    async def update_source(self, *, id: int, conn_string: str) -> Optional[models.Source]:
        row = (await self._conn.execute(sqlalchemy.text(UPDATE_SOURCE), {"p1": id, "p2": conn_string})).first()
        if row is None:
            return None
        return models.Source(
            id=row[0],
            owner=row[1],
            conn_string=row[2],
            created_at=row[3],
        )
