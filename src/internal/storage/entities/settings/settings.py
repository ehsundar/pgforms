# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.20.0
# source: settings.sql
from typing import Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

GET_BOOL_SETTING = """-- name: get_bool_setting \\:one
select value_bool
from settings
where key = :p1
"""


GET_FLOAT_SETTING = """-- name: get_float_setting \\:one
select value_float
from settings
where key = :p1
"""


GET_INT_SETTING = """-- name: get_int_setting \\:one
select value_int
from settings
where key = :p1
"""


GET_STR_SETTING = """-- name: get_str_setting \\:one
select value_str
from settings
where key = :p1
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def get_bool_setting(self, *, key: str) -> Optional[Optional[bool]]:
        row = self._conn.execute(sqlalchemy.text(GET_BOOL_SETTING), {"p1": key}).first()
        if row is None:
            return None
        return row[0]

    def get_float_setting(self, *, key: str) -> Optional[Optional[float]]:
        row = self._conn.execute(sqlalchemy.text(GET_FLOAT_SETTING), {"p1": key}).first()
        if row is None:
            return None
        return row[0]

    def get_int_setting(self, *, key: str) -> Optional[Optional[int]]:
        row = self._conn.execute(sqlalchemy.text(GET_INT_SETTING), {"p1": key}).first()
        if row is None:
            return None
        return row[0]

    def get_str_setting(self, *, key: str) -> Optional[Optional[str]]:
        row = self._conn.execute(sqlalchemy.text(GET_STR_SETTING), {"p1": key}).first()
        if row is None:
            return None
        return row[0]


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def get_bool_setting(self, *, key: str) -> Optional[Optional[bool]]:
        row = (await self._conn.execute(sqlalchemy.text(GET_BOOL_SETTING), {"p1": key})).first()
        if row is None:
            return None
        return row[0]

    async def get_float_setting(self, *, key: str) -> Optional[Optional[float]]:
        row = (await self._conn.execute(sqlalchemy.text(GET_FLOAT_SETTING), {"p1": key})).first()
        if row is None:
            return None
        return row[0]

    async def get_int_setting(self, *, key: str) -> Optional[Optional[int]]:
        row = (await self._conn.execute(sqlalchemy.text(GET_INT_SETTING), {"p1": key})).first()
        if row is None:
            return None
        return row[0]

    async def get_str_setting(self, *, key: str) -> Optional[Optional[str]]:
        row = (await self._conn.execute(sqlalchemy.text(GET_STR_SETTING), {"p1": key})).first()
        if row is None:
            return None
        return row[0]
